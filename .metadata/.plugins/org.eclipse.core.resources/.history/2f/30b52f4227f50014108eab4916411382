package ca.effpro.learn.hadoop.mr;

import org.apache.hadoop.fs.Path;
import org.apache.hadoop.mapreduce.lib.input.FileInputFormat;
import org.apache.hadoop.mapreduce.lib.output.FileOutputFormat;
import org.apache.hadoop.mapreduce.lib.output.SequenceFileOutputFormat;
import org.apache.hadoop.mapreduce.Job;
import org.apache.hadoop.mapreduce.Mapper;
import org.apache.hadoop.conf.Configured;
import org.apache.hadoop.conf.Configuration;
import org.apache.hadoop.util.Tool;
import org.apache.hadoop.util.ToolRunner;

public abstract class MRBase extends Configured implements Tool {

	private String inputFile;
	private String outputFile;
	
	protected void printHelp() {
		System.err.println("Following parameters are needed : ");
		System.err.println("<input dir>");
		System.err.println("<output dir>");
	}

	protected int parserArguments(String[] args) throws Exception {

		if (args.length != 2) {
			printHelp();
			return -1;
		}

		Job job = new Job(getConf());
		job.setJarByClass(getClass());
		job.setJobName("Create Sequence File, from text file");

		FileInputFormat.setInputPaths(job, new Path(args[0]));
		FileOutputFormat.setOutputPath(job, new Path(args[1]));

		job.setMapperClass(Mapper.class);
		job.setOutputFormatClass(SequenceFileOutputFormat.class);
		job.setNumReduceTasks(0);

		boolean success = job.waitForCompletion(true);
		return success ? 0 : 1;
	}

	public static void main(String[] args) throws Exception {
		int exitCode = ToolRunner.run(new Configuration(),
				new MRBase(), args);
		System.exit(exitCode);
	}
}