package ca.effpro.learn.hadoop.mr.tpt.exer1;

import java.io.IOException;
import java.util.HashSet;
import java.util.Set;

import org.apache.commons.lang3.StringUtils;
import org.apache.commons.logging.Log;
import org.apache.commons.logging.LogFactory;
import org.apache.hadoop.io.IntWritable;
import org.apache.hadoop.io.Text;
import org.apache.hadoop.mapreduce.Counter;
import org.apache.hadoop.mapreduce.Reducer;

import ca.effpro.hadoop.mrbasics.old.KijijiMRCounterEnums;
import ca.effpro.hadoop.mrbasics.old.RegionToUniqueLinkReducer;

public class YearlyCollectionOfAmountToInfractionReducer extends
		Reducer<YearMonthToInfractionWritable, Text, Text, IntWritable> {
	private static final Log logger = LogFactory
			.getLog(YearlyCollectionOfAmountToInfractionReducer.class);

	Text k4 = new Text();
	IntWritable v4 = new IntWritable();
	
	public void reduce(
			YearMonthToInfractionWritable key,
			Iterable<Text> values,
			Reducer<YearMonthToInfractionWritable, Text, Text, IntWritable>.Context context)
			throws IOException, InterruptedException {
		
		logger.info("reducer invoked ...");

		int year = key.getYear().get();
		String infractionCode = key.getInfractionCode().toString();
		int totalAmount = 0;
		String[] valsConsituent;
		
		for (Text value : values) {
			valsConsituent = value.toString().split(",");
			totalAmount += Integer.parseInt(valsConsituent[0]);
		}
		
		k4.set(StringUtils.join(year,infractionCode,","));
		v4.set(totalAmount);
		
		context.write(k4, v4);

	}
}