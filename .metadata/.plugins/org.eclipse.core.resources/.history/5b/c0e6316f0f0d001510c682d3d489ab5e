package ca.effpro.learn.hadoop.mr.tpt.avro;

import java.io.IOException;

import org.apache.avro.mapred.AvroKey;
import org.apache.avro.mapred.AvroValue;
import org.apache.commons.lang3.StringUtils;
import org.apache.commons.logging.Log;
import org.apache.commons.logging.LogFactory;
import org.apache.hadoop.io.BytesWritable;
import org.apache.hadoop.io.Text;
import org.apache.hadoop.mapreduce.Counter;
import org.apache.hadoop.mapreduce.Mapper;

import ca.effpro.learn.avro.tpt.ParkingTicket;
import ca.effpro.learn.hadoop.mr.tpt.exer1.Exer1CounterEnum;

/**
 * Used for logging file names (in the zip file) entries.
 * 
 * Input Key : filename (from zip file) Input Value : file content Output Key :
 * filename (from zip file) Output Value : file content
 *
 */
public class ZipFileEntriesToAvroMapper extends
		Mapper<Text, BytesWritable, AvroKey<CharSequence>, AvroValue<ParkingTicket>> {
	private static final Log logger = LogFactory
			.getLog(ZipFileEntriesToAvroMapper.class);

	private AvroKey<CharSequence> k2 = new AvroKey<CharSequence>();
	private AvroValue<ParkingTicket> v2 = new AvroValue<ParkingTicket>();
	
	private String fromPreviousRow = "";

	public void map(Text k1, BytesWritable v1,
			Mapper<Text, BytesWritable, AvroKey<CharSequence>, AvroValue<ParkingTicket>>.Context context)
			throws IOException, InterruptedException {

		String val$String$line = new String(v1.getBytes());
		val$String$line = val$String$line.replaceAll("[^a-zA-Z0-9,\\n\\*]","");
		
		String row = fromPreviousRow + val$String$line;
		int idx = row.lastIndexOf('\n');

		fromPreviousRow = row.substring(idx);
		
		String[] dataRows = row.substring(0, idx).split("\n");
		String[] cols;
		long skipRecordCount = 0;
		long processedRecordCount =0;
		
		for(String dataRow : dataRows) {
		
			if (StringUtils.isBlank(dataRow)) {
				skipRecordCount++;
				continue;
			}

			if (dataRow.indexOf("date") != -1) {
				skipRecordCount++;
				continue;
			}

			cols = dataRow.split(",");

			if (cols.length < 10) {
				skipRecordCount++;
				continue;
			}
			
			ParkingTicket tkt = new ParkingTicket();
			tkt.setInfractionDate(cols[1]);
			tkt.setInfractionCode(Integer.parseInt(cols[2]));
			tkt.setFineAmount(Integer.parseInt(cols[4]));
			tkt.setLocation1(cols[7]);
			tkt.setProvince(cols[10]);
			
			v2.datum(tkt);
			k2.datum(k1.toString());

			context.write(k2, v2);
		}
		
		Counter processedRecordCounter = context.getCounter(Exer1CounterEnum.class.getName(),
				Exer1CounterEnum.PROCESSED_RECORD_COUNTER.toString());
		processedRecordCounter.increment(processedRecordCount);
		
		Counter invalidRecordCounter = context.getCounter(Exer1CounterEnum.class.getName(),
				Exer1CounterEnum.INVALID_RECORD_COUNTER.toString());
		invalidRecordCounter.increment(skipRecordCount);
		
		
	}
}